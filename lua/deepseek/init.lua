-- NEW --
local M = {}

local function get_module_path(module_name)
	local info = debug.getinfo(2, "S")
	if info and info.source:sub(1, 1) == "@" then
		return info.source:sub(2):gsub("[/\\][^/\\]+%.lua$", "")
	end

	vim.notify(
		"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –¥–æ –º–æ–¥—É–ª—è: " .. (module_name or "unknown"),
		vim.log.levels.WARN
	)
	return nil
end

local function load_setup(loaded, opts)
	local mt = getmetatable(loaded)
	-- 1Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∞—Å—Å (—É –Ω–µ–≥–æ –º–µ—Ç–æ–¥ setup –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–µ/–º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü–µ)
	if mt and type(mt.__index) == "table" then
		if type(mt.__index.setup) == "function" then
			loaded:setup(opts) -- –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è self
		end
	elseif mt then
		if type(mt.setup) == "function" then -- 3Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞, –º–µ—Ç–æ–¥ –ª–µ–∂–∏—Ç –≤ –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü–µ
			mt.setup(loaded, opts)
		end
	elseif type(loaded) == "table" and type(loaded.setup) == "function" then -- 2Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞-–º–æ–¥—É–ª—å —Å –º–µ—Ç–æ–¥–æ–º setup
		loaded.setup(opts)
	end
end

local function load_submodules(path, prefix, opts, ignore_init)
	local handle = vim.uv.fs_scandir(path)
	if not handle then
		return
	end

	local has_init = false
	local entries = {}

	while true do
		local name, t = vim.uv.fs_scandir_next(handle)
		if not name then
			break
		end

		if name == "init.lua" then
			has_init = not ignore_init
		else
			table.insert(entries, { name = name, type = t })
		end
	end

	-- –ï—Å–ª–∏ –µ—Å—Ç—å init.lua, –¥–æ–≤–µ—Ä—è–µ–º –µ–º—É —Å–∞–º–æ–º—É —Ä–µ—à–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å
	if has_init then
		local module_name = prefix:sub(1, -2)
		local ok, loaded = pcall(require, module_name)
		if ok then
			load_setup(loaded, opts)
		end
		return
	end
	--
	-- üìå –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ—Ä—è–¥–æ–∫, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–º—É
	table.sort(entries, function(a, b)
		local a_name = a.name:gsub("%.lua$", "")
		local b_name = b.name:gsub("%.lua$", "")
		local a_index = opts and opts[a_name] and opts[a_name].order or 50
		local b_index = opts and opts[b_name] and opts[b_name].order or 50
		return a_index < b_index
	end)

	-- –ï—Å–ª–∏ –Ω–µ—Ç init.lua ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
	for _, entry in ipairs(entries) do
		local name, t = entry.name, entry.type
		local short_name = name:gsub("%.lua$", "")
		local local_opts = opts and opts[short_name] or {}
		local_opts.disable = local_opts.disable or false

		if t == "file" and name:match("%.lua$") and name ~= "init.lua" then
			-- üìå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ opts
			if not local_opts.disable then
				local mod_name = prefix .. short_name
				local ok, loaded = pcall(require, mod_name)
				if ok then
					M[short_name] = loaded
					-- üìå –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ä–∞–∑—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
					load_setup(loaded, local_opts)
				else
					vim.notify("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: " .. mod_name, vim.log.levels.WARN)
				end
			end
		elseif t == "directory" then
			-- üìå –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
			load_submodules(path .. "/" .. name, prefix .. name .. ".", local_opts, false)
		end
	end
end

function M.setup(opts)
	opts = opts or {}

	-- üìå –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
	local cfg = require("deepseek.config")
	cfg.setup(opts)

	-- üìå –ó–∞–¥–∞—ë–º –ø—É—Ç—å –Ω–∞ –ª–µ—Ç—É, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å package.searchpath –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
	local base_path = get_module_path("deepseek")
	local base_module = "deepseek."

	-- üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å, —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!
	load_submodules(base_path, base_module, cfg.get_config(), true)

	-- üìå –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ä–∞–∑—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
end

return M
